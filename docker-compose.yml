services:
  micro-proxy:
    container_name: micro-proxy
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl-certs/nodemicrosss:/etc/nginx/ssl
    depends_on:
      - micro-crypt
      - micro-auth
      - micro-static
      - micro-data
  
  cetaceo:
    container_name: cetaceo
    image: crccheck/hello-world
    ports:
      - "8000:8000"
  
  micro-crypt:
    container_name: micro-crypt
    build: ./micro-node-crypt
    env_file: 
      - .env.compose

  micro-auth:
    container_name: micro-auth
    build: ./micro-node-auth
    env_file: 
      - .env.compose
    depends_on:
      - micro-crypt
      - mysql_db

  micro-static:
    container_name: micro-static
    build: ./micro-node-static-files
    env_file: 
      - .env.compose
    volumes:
      - static_files:/$$MICRO_STATIC_STORAGE_PATH
    depends_on:
      - micro-auth
      - mysql_db

  micro-data:
    container_name: micro-data
    build: ./micro-node-data
    env_file: 
      - .env.compose
    depends_on:
      - mongo-data
      - micro-auth
  
  mysql_db:
    container_name: mysql_db
    image: mysql:8.0
    env_file: 
      - .env.compose
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"

  mongo-data:
    container_name: mongo-data
    image: mongo:latest
    env_file: 
      - .env.compose
    ports:
      - "27017:27017"
    volumes:
      - mongo-data-volume:/data/db
    command: [ --auth ]


volumes:
  mysql_data:
  static_files:
  mongo-data-volume:
